{
  "id": "lesson_19",
  "block": "JS",
  "title": "Асинхронность, работа с API, setTimeout, setInterval",
  "welcome": "Вы подошли к одной из наиболее важных тем в JavaScript — асинхронность. В этом уроке может быть местами сложно. Но в итоге, вы получите новый навык - работа с API. Эта технология позволяет сделать страницы ещё более интерактивными. В современном вебе сложно найти популярный сайт, который бы не использовал API.",
  "tasks": [
    {
      "id": 1,
      "title": "Задание 1",
      "description": "- Создайте функцию makeOne, которая выполняет GET-запрос по адресу https://catfact.ninja/fact, используя функцию fetch().\n- Затем из полученного объекта нужно извлечь свойство \"status\"\n- Результат должен быть выведен в элемент <p> с id \"practicum\" в DOM-дерево.",
      "code": "function makeOne() {\n  //Ваш код\n  //Если есть ответ от сервера, выведи его свойство status в <p>\n  //Если произошла ошибка, выведи в <p> сообщение \"Ошибка. Запрос не выполнен\"\n}\n\nmakeOne()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\n\nfunction makeOne() {\n  fetch('https://catfact.ninja/fact')\n    .then((response) => {\n        paragraph.textContent = response.status\n    })\n    .catch((err) => {\n        paragraph.textContent = 'Произошла ошибка'\n    })\n}\n\nmakeOne()",
      "response": "",
      "comment": "Пожалуйста, обратите внимание, при написании функции для запроса API нужно добавлять обработку ошибок. Используйте метод catch после метода then, чтобы отлавливать и обрабатывать возможные ошибки, которые могут возникнуть в процессе выполнения запроса. Это поможет предотвратить неожиданные проблемы и обеспечит более надёжную работу вашего кода.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 2,
      "title": "Задание 2",
      "description": "Создайте функцию makeTwo, которая выполняет следующие действия:\n\n- Функция makeTwo должна сделать GET-запрос по адресу https://emojihub.yurace.pro/api/random/group/face-positive с помощью функции fetch()\n- Полученный ответ должен быть преобразован в формат JSON с помощью метода response.json()\n- Затем из полученного JSON-объекта нужно извлечь свойство \"name\"\n- Полученное значение вставьте в элемент с id \"practicum\" в DOM-дерево\n- В случае ошибки выведите сообщение 'Произошла ошибка'",
      "code": "function makeTwo() {\n\t//Ваш код\n}\n\nmakeTwo()",
      "correctAnswer": "function makeTwo() {\n  const paragraph = document.getElementById('practicum')\n\n  fetch('https://emojihub.yurace.pro/api/random/group/face-positive')\n  .then((res) => {\n    return res.json()\n  })\n  .then((data) => {\n    paragraph.innerHTML = data.name\n  })\n  .catch((err) => {\n    paragraph.innerHTML ='Ошибка. Запрос не выполнен'\n  });\n}\n\nmakeTwo()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 3,
      "title": "Задание 3",
      "description": "Создайте функцию makeThree, которая выполняет GET-запрос по адресу https://www.boredapi.com/api/activity, используя функцию fetch(). Выведите в <p> свойство statusText полученного объекта.\nВ случае ошибки выведите сообщение 'Ошибка. Запрос не выполнен'",
      "code": "function makeThree() {\n\t//Ваш код\n}\n\nmakeThree()",
      "correctAnswer": "function makeThree() {\n  const paragraph = document.getElementById('practicum')\n  fetch('https://www.boredapi.com/api/activity')\n    .then((data) => {\n      paragraph.textContent = data.statusText\n      console.log(data.statusText)\n    })\n    .catch((err) => {\n      paragraph.textContent = 'Ошибка. Запрос не выполнен'\n    });\n}\n\nmakeThree()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 4,
      "title": "Задание 4",
      "description": "Создайте функцию makeFour, которая выполняет следующие действия:\n\n- Функция makeFour должна сделать GET-запрос по адресу https://www.boredapi.com/api/activity с помощью функции fetch()\n- Полученный ответ должен быть преобразован в формат JSON с помощью метода response.json()\n- Затем из полученного JSON-объекта нужно извлечь свойство \"activity\", которое содержит описание активности\n- Вывести полученную активность в формате 'Activity: описание активности' в <p>\n- В случае ошибки выведите сообщение 'Ошибка. Запрос не выполнен'",
      "code": "function makeFour() {\n\t//Ваш код\n}\n\nmakeFour()",
      "correctAnswer": "function makeFour() {\n  const paragraph = document.getElementById('practicum')\n  \n  fetch('https://www.boredapi.com/api/activity')\n  .then((res) => {\n    return res.json()\n  })\n  .then((data) => {\n    paragraph.textContent = `Activity: ${data.activity}`\n  })\n  .catch((err) => {\n    paragraph.textContent = 'Ошибка. Запрос не выполнен'\n  });\n}\n\nmakeFour()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 5,
      "title": "Задание 5",
      "description": "Создайте функцию makeFive, которая выполняет следующие действия:\n\nФункция makeFive должна сделать GET-запрос по адресу https://www.boredapi.com/api/activity с помощью функции fetch()\nПолученный ответ должен быть преобразован в формат JSON с помощью метода response.json()\nЗатем из полученного JSON-объекта нужно извлечь свойство \"participants\", которое содержит количество участников для активности\nВывести количество участников для активности в <p>\n- В случае ошибки выведите сообщение 'Ошибка. Запрос не выполнен'",
      "code": "function makeFive() {\n\t//Ваш код\n}\n\nmakeFive()",
      "correctAnswer": "function makeFive() {\n  const paragraph = document.getElementById('practicum')\n  \n  fetch('https://www.boredapi.com/api/activity')\n  .then((res) => {\n    return res.json()\n  })\n  .then((data) => {\n    paragraph.textContent = data.participants\n  })\n  .catch((err) => {\n    paragraph.textContent = 'Ошибка. Запрос не выполнен'\n  });\n}\n\nmakeFive()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 6,
      "title": "Задание 6",
      "description": "Создайте функцию makeSix, которая выполняет GET-запрос по адресу https://www.boredapi.com/api/activity, используя функцию fetch(). Выведите в <p> свойства из полученного объекта, такие как activity, type, price и accessibility.\n- В случае ошибки выведите сообщение 'Ошибка. Запрос не выполнен'",
      "code": "function makeSix() {\n\t//Ваш код\n}\n\nmakeSix()",
      "correctAnswer": "function makeSix() {\n  const paragraph = document.getElementById('practicum')\n  \n  fetch('https://www.boredapi.com/api/activity')\n  .then((res) => {\n    return res.json()\n  })\n  .then((data) => {\n      paragraph.textContent = `${data.activity}, ${data.type}, ${data.price }, ${data.accessibility}`\n  })\n  .catch((err) => {\n    paragraph.textContent = 'Ошибка. Запрос не выполнен'\n  });\n}\n\nmakeSix()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 7,
      "title": "Задание 7",
      "description": "Создайте функцию makeSeven, которая выполняет GET-запрос по адресу https://api.agify.io/, используя функцию fetch(). Выведите в <p> ответ с сервера (не забудь преобразовать его к строке с помощью JSON.stringify()), чтобы убедиться, что получили данные.\nВ случае ошибки выведите сообщение 'Ошибка. Запрос не выполнен'",
      "code": "function makeSeven() {\n\t//Ваш код\n}\n\nmakeSeven()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\nfunction makeSeven() {\n  fetch('https://api.agify.io/')\n    .then((res) => {\n        return res.json()\n    })\n    .then((data) => {\n      paragraph.textContent = JSON.stringify(data)\n    })\n    .catch((err) => {\n      paragraph.textContent = err\n    })\n}\n\nmakeSeven()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 8,
      "title": "Задание 8",
      "description": "Если вы сделали всё верно, в 7 задании вы получили ответ от сервера \"Missing 'name' parameter\". Помните, что обработка ошибок является важной частью кода, и хорошая практика - всегда предусматривать возможные ситуации, когда запрос может завершиться неудачно.\n\nСоздайте функцию makeEight, которая выполняет GET-запрос по адресу https://api.agify.io/, используя функцию fetch(), с параметром '?name=alice' (\"https://api.agify.io/параметр\").\nВ случае ошибки выведите сообщение 'Ошибка. Запрос не выполнен'",
      "code": "function makeEight() {\n\t//Ваш код\n}\n\nmakeEight()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\nfunction makeEight() {\n  fetch('https://api.agify.io/?name=alice')\n  .then((res) => {\n    return res.json()\n  })\n  .then((data) => {\n    paragraph.textContent = JSON.stringify(data)\n  })\n  .catch((err) => {\n    paragraph.textContent = 'Ошибка. Запрос не выполнен'\n  })\n}\n\nmakeEight()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 9,
      "title": "Задание 9",
      "description": "Создайте функцию makeNine, которая выполняет GET-запрос по адресу `https://api.agify.io/` с параметром ?name=vadim, используя функцию fetch(), и выведет полученные данные в элемент с id practicum.\nВ случае ошибки выведите сообщение 'Ошибка. Запрос не выполнен'\n\nПодсказка: использование JSON.stringify() позволит преобразовать объект в строку.",
      "code": "const resultElement = document.getElementById('practicum')\n\nfunction makeNine() {\n  fetch('https://api.agify.io/?name=vadim')\n    .then((response) => response.json())\n    .then((data) => {\n      //Ваш код\n    })\n    .catch((error) => {\n      //Ваш код\n    })\n}\n\nmakeNine()",
      "correctAnswer": "const resultElement = document.getElementById('practicum')\n\nfunction makeNine() {\n  fetch('https://api.agify.io/?name=vadim')\n    .then((response) => response.json())\n    .then((data) => {\n      resultElement.textContent = JSON.stringify(data)\n    })\n    .catch((error) => {\n      resultElement.textContent = `Ошибка: ${error}`\n    })\n}\n\nmakeNine()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 10,
      "title": "Задание 10",
      "description": "Создайте функцию makeTen, которая выполняет следующие действия:\n\n- Функция makeTen должна сделать GET-запрос по адресу https://dog.ceo/api/breeds/image/random с помощью функции fetch()\n- Полученный ответ должен быть преобразован в формат JSON с помощью метода response.json()\n- Затем из полученного JSON-объекта нужно извлечь свойство \"message\", которое содержит ссылку на случайное изображение собаки\n- Далее нужно создать элемент <img> и установить его атрибут \"src\" равным значению из свойства \"message\" (ссылке на изображение)\n- Добавьте элементу <img> класс 'html-img'\n- Созданный элемент <img> должен быть вставлен после элемента с id \"practicum\" в DOM-структуре страницы\nПосле выполнения этих шагов будет загружено случайное изображение собаки, которое будет отображено под <p>.\n- В случае ошибки выведите в <p> сообщение 'Ошибка. Запрос не выполнен'",
      "code": "function makeTen() {\n\t//Ваш код\n}\n\nmakeTen()",
      "correctAnswer": "function makeTen() {\n  fetch('https://dog.ceo/api/breeds/image/random')\n    .then((response) => response.json())\n    .then((data) => {\n      const imgElement = document.createElement('img')\n      imgElement.classList.add('html-img')\n      imgElement.src = data.message\n      const section = document.querySelector('.html')\n      section.append(imgElement)\n    })\n    .catch((error) => {\n      document.getElementById('practicum').textContent = `Ошибка: ${error}`\n    })\n}\nmakeTen()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 11,
      "title": "Задание 11",
      "description": "Нужно создать функцию makeEleven, которая выполняет следующие действия:\n\nФункция makeEleven должна сделать GET-запрос на адрес https://api.ipify.org?format=json с помощью функции fetch()\nПолученный ответ должен быть преобразован в формат JSON с помощью метода response.json()\nЗатем из полученного JSON-объекта нужно извлечь свойство \"ip\", которое содержит текущий IP-адрес\nПолученный IP-адрес нужно вывести в элемент с id \"practicum\"\nВ случае ошибки выведите `Ошибка: ${error}`",
      "code": "function makeEleven() {\n  fetch('https://api.ipify.org?format=json')\n    .then((response) => response.json())\n    .then((data) => {\n        //Ваш код\n    })\n    .catch((error) => {\n      document.getElementById('practicum').textContent = `Ошибка: ${error}`\n    })\n}\n\nmakeEleven()",
      "correctAnswer": "function makeEleven() {\n  fetch('https://api.ipify.org?format=json')\n    .then((response) => response.json())\n    .then((data) => {\n       document.getElementById('practicum').textContent = data.ip\n    })\n    .catch((error) => {\n      document.getElementById('practicum').textContent = `Ошибка: ${error}`\n    })\n}\n\nmakeEleven()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 12,
      "title": "Задание 12",
      "description": "Введите в поле ввода IP-адрес из задания 11 в поле ниже для получения его гео-позиции. Используйте функцию fetch() для выполнения GET-запроса по адресу https://api.ipgeolocationapi.com/geolocate/{ipAddress}. Замените {ipAddress} на фактический IP-адрес, который вы получите из текстового поля.\n\nПодсказка: используйте свойство textContent для вывода данных о гео-позиции в виде строки.\nВ случае ошибки выведите `Ошибка: ${error}`",
      "code": "function makeTwelve() {\n\t//Ваш код\n}\n\nmakeTwelve()",
      "correctAnswer": "function makeTwelve() {\n  const paragraph = document.getElementById('practicum')\n  const ipAddress = document.getElementById('ipAddress').value\n  fetch(`https://api.ipgeolocationapi.com/geolocate/${ipAddress}`)\n    .then((response) => response.json())\n    .then((data) => {\n      paragraph.textContent = JSON.stringify(data)\n    })\n    .catch((error) => {\n      paragraph.textContent = `Ошибка: ${error}`\n    })\n}\n\nmakeTwelve()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <input class='html-input' id='ipAddress'/>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <input className='html-input' id='ipAddress'/>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 13,
      "title": "Задание 13",
      "description": "Создайте функцию makeThirteen, которая выполняет GET-запрос по адресу https://official-joke-api.appspot.com/random_joke, используя функцию fetch(). Выведите в <p> ответ с сервера, чтобы посмотреть, какие поля есть в ответе.\nВ случае ошибки выведите `Ошибка: ${error}` ",
      "code": "function makeThirteen() {\n\t//Ваш код\n}\n\nmakeThirteen()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\nfunction makeThirteen() {\n  fetch('https://official-joke-api.appspot.com/random_joke')\n    .then((response) => response.json())\n    .then((data) => paragraph.textContent = JSON.stringify(data))\n    .catch((error) => paragraph.textContent = `Ошибка: ${error}`)\n}\n\nmakeThirteen()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 14,
      "title": "Задание 14",
      "description": "Создайте функцию makeFourteen, которая выполняет GET-запрос по адресу https://official-joke-api.appspot.com/random_joke, используя функцию fetch(). Выведите на страницу информацию о шутке, используя поля \"setup\" и \"punchline\" из ответа сервера.\nВ случае ошибки выведите `Ошибка: ${error}`\n\nПодсказка: используйте свойство innerHTML и шаблонные строки",
      "code": "const paragraph = document.getElementById('practicum')\nfunction makeFourteen() {\n  fetch('https://official-joke-api.appspot.com/random_joke')\n    .then((response) => response.json())\n    .then((data) => {\n        //Ваш код\n    })\n    .catch((error) => paragraph.textContent = `Ошибка: ${error}`)\n}\n\nmakeFourteen()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\n\nfunction makeFourteen() {  \n  fetch('https://official-joke-api.appspot.com/random_joke')\n    .then((response) => response.json())\n    .then((data) => {\n      paragraph.innerHTML = `${data.setup} ${data.punchline}`\n    })\n    .catch((error) => paragraph.innerHTML = `Ошибка: ${error}`)\n}\n\nmakeFourteen()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 15,
      "title": "Задание 15",
      "description": "Нужно создать функцию makeFifteen, которая делает следующие действия:\n\nФункция makeFifteen должна сделать POST-запрос на адрес https://jsonplaceholder.typicode.com/posts с помощью функции fetch()\nВ теле запроса отправьте JSON-объект с полями title и body, например:\n{ \"title\": \"Заголовок\", \"body\": \"Текст поста\" }\nУкажите заголовок \"Content-Type\" как \"application/json\" для запроса\nПолученный ответ от сервера должен быть преобразован в формат JSON с помощью метода response.json()\nВыведите ответ от сервера в <p>\nВ случае ошибки выведите `Ошибка: ${error}`\nПодсказка: использование JSON.stringify() позволит преобразовать объект в строку.",
      "code": "const paragraph = document.getElementById('practicum')\n\nfunction makeFifteen() {\n  const postData = {\n    title: 'Заголовок',\n    body: 'Текст поста',\n  };\n\n  fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    //Ваш код\n  })\n    .then((response) => response.json())\n    .then((data) => {\n        //Ваш код\n      })\n    .catch((error) => paragraph.textContent = `Ошибка: ${error}`)\n}\n\nmakeFifteen()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\n\nfunction makeFifteen() {\n  const postData = {\n    title: 'Заголовок',\n    body: 'Текст поста',\n  };\n\n  fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(postData)\n  })\n    .then((response) => response.json())\n    .then((data) => {\n       paragraph.textContent = JSON.stringify(data)\n    })\n    .catch((error) => paragraph.textContent = `Ошибка: ${error}`)\n}\n\nmakeFifteen()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 16,
      "title": "Задание 16",
      "description": "Создайте функцию makeSixteen, которая делает следующие действия:\n\n- Функция makeSixteen должна сделать PUT-запрос на адрес https://jsonplaceholder.typicode.com/posts/1 с помощью функции fetch()\n- Укажите заголовок \"Content-Type\" как \"application/json\" для запроса\n- В теле запроса отправьте JSON-объект с полями title и body, например:\n{ \"title\": \"Новый заголовок\", \"body\": \"Новый текст поста\" }\n- Полученный ответ с сервера должен быть преобразован в формат JSON с помощью метода response.json()\n- Выведите ответ с сервера в <p>\nВ случае ошибки выведите `Ошибка: ${error}`\nПодсказка: использование JSON.stringify() позволит преобразовать объект в строку.",
      "code": "const paragraph = document.getElementById('practicum')\n\nfunction makeSixteen() {\n\t//Ваш код\n}\n\nmakeSixteen()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\n\nfunction makeSixteen() {\n  const putData = {\n    title: 'Новый заголовок',\n    body: 'Новый текст поста',\n  };\n\n  fetch('https://jsonplaceholder.typicode.com/posts/1', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(putData) \n  })\n    .then((response) => response.json())\n    .then((data) => paragraph.textContent = JSON.stringify(data))\n    .catch((error) =>  paragraph.textContent = `${error}`)\n}\n\nmakeSixteen()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 17,
      "title": "Задание 17",
      "description": "Создайте функцию makeSeventeen, которая делает следующие действия:\n\nФункция makeSeventeen должна сделать DELETE-запрос на адрес https://jsonplaceholder.typicode.com/posts/1 с помощью функции fetch()\nПолученный ответ с сервера должен быть выведен в <p>\nВ случае ошибки выведите `Ошибка: ${error}`",
      "code": "const paragraph = document.getElementById('practicum')\n\nconst makeSeventeen = () => {\n\t//Ваш код\n}\n\nmakeSeventeen()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\n\nconst makeSeventeen = () => {\n  fetch('https://jsonplaceholder.typicode.com/posts/1', {\n    method: 'DELETE'\n  })\n    .then((response) => response.json())\n  .then((data) => {\n    paragraph.textContent = JSON.stringify(data)\n  })\n  .catch((err) => {\n    paragraph.textContent = `Ошибка: ${err}`\n  });\n}\n\nmakeSeventeen()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 18,
      "title": "Задание 18",
      "description": "Создайте функцию makeEighteen, которая делает следующие действия:\n\n- Функция makeSeventeen должна сделать POST-запрос на адрес https://jsonplaceholder.typicode.com/photos с помощью функции fetch()\n- Укажите заголовок \"Content-Type\" как \"application/json\" для запроса\n- В теле запроса отправьте JSON-объект с полями title и url, например:\n{ \"title\": \"Название изображения\", \"url\": \"https://example.com/image.jpg\" }\n- Полученный ответ с сервера должен быть преобразован в формат JSON с помощью метода response.json()\nВыведите ответ с сервера в <p>\nВ случае ошибки выведите `Ошибка: ${error}`",
      "code": "function makeEighteen() {\n\t//Ваш код\n}\n\nmakeEighteen()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\n\nfunction makeEighteen() {\n  const postData = {\n    title: 'Название изображения',\n    url: 'https://example.com/image.jpg',\n  };\n\n  fetch('https://jsonplaceholder.typicode.com/photos', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(postData)\n  })\n    .then((response) => response.json())\n    .then((data) => paragraph.textContent = JSON.stringify(data))\n    .catch((error) => paragraph.textContent = `Ошибка: ${error}`)\n}\n\nmakeEighteen()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 19,
      "title": "Задание 19",
      "description": "Создайте функцию makeNineteen, которая делает следующие действия:\n\nФункция makeNineteen должна сделать POST-запрос на адрес https://jsonplaceholder.typicode.com/users с помощью функции fetch()\nВ теле запроса отправьте JSON-объект с полями name, username, email и phone, например:\n{ \"name\": \"Кот Учёный\", \"username\": \"kitty\", \"email\": \"kitty@example.com\", \"phone\": \"123-456-7890\" }\nУкажите заголовок \"Content-Type\" как \"application/json\" для запроса\nПолученный ответ с сервера должен быть преобразован в формат JSON с помощью метода response.json()\nВыведите ответ с сервера в <p>\nВ случае ошибки выведите `Ошибка: ${error}`",
      "code": "function makeNineteen() {\n\t//Ваш код\n}\n\nmakeNineteen()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\n\nfunction makeNineteen() {\n  fetch('https://jsonplaceholder.typicode.com/users', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      \"name\": \"Кот Учёный\",\n      \"username\": \"kitty\",\n      \"email\": \"kitty@example.com\",\n      \"phone\": \"123-456-7890\"\n    })\n  })\n    .then((response) => response.json())\n    .then((data) => paragraph.textContent = JSON.stringify(data))\n    .catch((error) => paragraph.textContent = `Ошибка: ${error}`)\n}\n\nmakeNineteen()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 20,
      "title": "Задание 20",
      "description": "Создайте функцию makeTwenty, которая делает следующие действия:\n\nФункция makeTwenty должна сделать POST-запрос на адрес https://jsonplaceholder.typicode.com/comments с помощью функции fetch()\nУкажите заголовок \"Content-Type\" как \"application/json\" для запроса\nВ теле запроса отправьте JSON-объект с полями name, email, body и postId, например:\n{ \"name\": \"Золотая рыбка\", \"email\": \"goldfish@example.com\", \"body\": \"Гав-гав!\", \"postId\": 1 }\nПолученный ответ с сервера должен быть преобразован в формат JSON с помощью метода response.json()\nВыведите ответ с сервера в <p>\nВ случае ошибки выведите `Ошибка: ${error}`",
      "code": "function makeTwenty() {\n\t//Ваш код\n}\n\nmakeTwenty()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\n\nfunction makeTwenty() {\n  fetch('https://jsonplaceholder.typicode.com/comments', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      \"name\": \"Золотая рыбка\",\n      \"email\": \"goldfish@example.com\",\n      \"body\": \"Гав-гав!\",\n      \"postId\": 1\n    })\n  })\n    .then((response) => response.json())\n    .then((data) => paragraph.textContent = JSON.stringify(data))\n    .catch((error) => paragraph.textContent = `Ошибка: ${error}`)\n}\n\nmakeTwenty()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 21,
      "title": "Задание 21",
      "description": "Создайте функцию makeTwentyOne, которая делает следующие действия:\n\n- Функция makeTwenty должна сделать PUT-запрос на адрес https://jsonplaceholder.typicode.com/comments/1 с помощью функции fetch()\n- Укажите заголовок \"Content-Type\" как \"application/json\" для запроса\nВ теле запроса отправьте JSON-объект с полями name, email, body и postId, например:\n{ \"name\": \"Золотая рыбка\", \"email\": \"goldfish@example.com\", \"body\": \"Буль-буль!\", \"postId\": 1 }\n- Полученный ответ с сервера должен быть преобразован в формат JSON с помощью метода response.json()\n- Выведите ответ с сервера в <p>\nВ случае ошибки выведи 'Ошибка. Запрос не выполнен'",
      "code": "function makeTwentyOne() {\n\t//Ваш код\n}\n\nmakeTwentyOne()",
      "correctAnswer": "function makeTwentyOne() {\n  const paragraph = document.getElementById('practicum')\n  fetch('https://jsonplaceholder.typicode.com/comments/1', {\n    method: 'PUT',\n    body: JSON.stringify({ \n      \"name\": \"Золотая рыбка\", \n      \"email\": \"goldfish@example.com\", \n      \"body\": \"Буль-буль!\", \n      \"postId\": 1 \n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  })\n  .then((res) => {\n    return res.json()\n  })\n  .then((data) => {\n\tparagraph.textContent = JSON.stringify(data)\n  })\n  .catch((err) => {\n    paragraph.textContent = 'Ошибка. Запрос не выполнен'\n  })\n}\n\nmakeTwentyOne()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 22,
      "title": "Задание 22",
      "description": "Создайте функцию makePromiseAllOne, которая делает следующие действия:\n\nФункция makePromiseAllOne должна делать два GET-запроса на адреса:\nhttps://jsonplaceholder.typicode.com/posts/1\nhttps://jsonplaceholder.typicode.com/comments/1\nИспользуйте `.then()` для обработки результатов.\nВыведите оба ответа с сервера в <p>\nВ случае ошибки выведите 'Ошибка. Запрос не выполнен'",
      "code": "function makePromiseAllOne() {\n\t//Ваш код\n}\n\nmakePromiseAllOne()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\nfunction makePromiseAllOne() {\n  const postUrl = 'https://jsonplaceholder.typicode.com/posts/1'\n  const commentUrl = 'https://jsonplaceholder.typicode.com/comments/1'\n\n  const postPromise = fetch(postUrl)\n    .then(response => response.json())\n    .then(data => {\n      return JSON.stringify(data)\n    })\n\n  const commentPromise = fetch(commentUrl)\n    .then(response => response.json())\n    .then(data => {\n      return JSON.stringify(data)\n    })\n\n  Promise.all([postPromise, commentPromise])\n    .then(results => {\n      paragraph.textContent = results\n    })\n    .catch(error => {\n      paragraph.textContent = 'Ошибка. Запрос не выполнен'\n    });\n}\n\nmakePromiseAllOne()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 23,
      "title": "Задание 23",
      "description": "Создайте функцию makePromiseAllTwo, которая делает следующие действия:\n\n- Функция makePromiseAllTwo должна делать три GET-запроса на адреса:\nhttps://jsonplaceholder.typicode.com/users/1\nhttps://jsonplaceholder.typicode.com/posts/1\nhttps://jsonplaceholder.typicode.com/comments/1\n- Используйте `async/await` для обработки результатов.\n- Выведите все ответы с сервера в <p>\nВ случае ошибки выведите 'Ошибка. Запрос не выполнен'",
      "code": "async function makePromiseAllTwo() {\n  try {\n    const response1 = await fetch(\n      'https://jsonplaceholder.typicode.com/users/1'\n    )\n    const data1 = await response1.json()\n\n    //Ваш код\n  } catch (error) {\n    //Ваш код\n  }\n}\n\nmakePromiseAllTwo()",
      "correctAnswer": "const paragraph = document.getElementById('practicum')\nasync function makePromiseAllTwo() {\n  let result\n  try {\n    const response1 = await fetch(\n      'https://jsonplaceholder.typicode.com/users/1'\n    )\n    const data1 = await response1.json()\n    result = JSON.stringify(data1)\n\n    const response2 = await fetch(\n      'https://jsonplaceholder.typicode.com/posts/1'\n    )\n    const data2 = await response2.json()\n    result += JSON.stringify(data2)\n\n    const response3 = await fetch(\n      'https://jsonplaceholder.typicode.com/comments/1'\n    )\n    const data3 = await response3.json()\n    result +=  JSON.stringify(data3)\n\n    paragraph.textContent = result\n  } catch (error) {\n    paragraph.textContent = 'Ошибка. Запрос не выполнен'\n  }\n}\n\nmakePromiseAllTwo()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 24,
      "title": "Задание 24",
      "description": "let name = \"Вася\";\nfunction sayHi() {\ndocument.getElementById('practicum').textContent = name;\n}\n\nsetTimeout(function() {\nlet name = \"Петя\";\nsayHi();\n}, 1000);\nЕсть код, как думаете, какое имя выведется в <p>? Проверьте себя.",
      "code": "const makeTwentyFour = () => {\n  let name = 'Вася'\n  function sayHi() {\n    document.getElementById('practicum').textContent = name\n  }\n\n  setTimeout(function () {\n    let name = 'Петя'\n    sayHi()\n  }, 1000)\n}",
      "correctAnswer": "const makeTwentyFour = () => {\n  let name = 'Вася'\n  function sayHi() {\n      document.getElementById('practicum').textContent = name\n  }\n\n  setTimeout(function () {\n    let name = 'Петя'\n    sayHi()\n  }, 1000)\n}\nmakeTwentyFour()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 25,
      "title": "Задание 25",
      "description": "document.getElementById('practicum').textContent = 1;\nsetTimeout(function () {\ndocument.getElementById('practicum').textContent = 2;\n}, 0);\ndocument.getElementById('practicum').textContent = 3;\nВ каком порядке числа выведутся в <p>?",
      "code": "function makeTwentyFive() {\nconst paragraph = document.getElementById('practicum')\n  let result = ''\n  //запишите в paragraph число 1\n  //все числа должны быть выведены через запятую \n  //Cтавим таймер на 0 миллисекунд\n  setTimeout(function () {\n      //допишите в paragraph число 2\n  }, 0)\n\n  //допишите в paragraph число 3\n}\nmakeTwentyFive()",
      "correctAnswer": "function makeTwentyFive() {\n  const paragraph = document.getElementById('practicum')\n  let result = ''\n\n  result += '1, '\n\n  // Cтавим таймер на 0 миллисекунд\n  setTimeout(function () {\n    result += '2, ';\n    paragraph.textContent = result;\n  }, 0);\n\n  result += '3, ';\n  paragraph.textContent = result;\n}\nmakeTwentyFive()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 26,
      "title": "Задание 26",
      "description": "Создайте функцию makeTwentySix, должна использовать setTimeout для отображения в <p> сообщения \"Прошло 5 секунд\" через 5 секунд.",
      "code": "function makeTwentySix() {\n\t//Ваш код\n}\n\nmakeTwentySix()",
      "correctAnswer": "function makeTwentySix() {\n  setTimeout(()=>{\n    document.getElementById('practicum').textContent = 'Прошло 5 секунд'\n  }, 5000)\n}\n\nmakeTwentySix()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 27,
      "title": "Задание 27",
      "description": "Создайте функцию makeTwentySeven, должна использовать setTimeout для отображения в <p> сообщения \"Прошло 2 секунды\" через 2 секунды.",
      "code": "function makeTwentySeven() {\n\t//Ваш код\n}\n\nmakeTwentySeven()",
      "correctAnswer": "function makeTwentySeven() {\n  setTimeout(()=>{\n    document.getElementById('practicum').textContent = 'Прошло 2 секунды'\n  }, 2000)\n}\n\nmakeTwentySeven()",
      "response": "",
      "comment": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 28,
      "title": "Задание 28",
      "description": "Создайте функцию makeTwentyEight, которая использует setInterval для отображения в <p> сообщения \"Прошло 3 секунды\" каждые 3 секунды.",
      "code": "function makeTwentyEight() {\n  let result = ''\n  //Ваш код\n\n  //Очищаем setInterval для экономии ресурсов\n  setTimeout(()=>{\n    clearInterval(/*тут надо подставить id, который возвращает setInterval*/)\n  }, 7000)\n}\n\nmakeTwentyEight()",
      "correctAnswer": "function makeTwentyEight() {\n  let result = ''\n  \n  const id = setInterval(() => {\n    if(result === '') {\n      result += 'Прошло 3 секунды'\n    } else {\n      result += ' Прошло 3 секунды'\n    }\n    document.getElementById('practicum').textContent = result\n  }, 3000)\n    \n  setTimeout(() => clearInterval(id), 7000)\n}\n\nmakeTwentyEight()",
      "response": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "comment": "Подсказка: в <p> необходимо дописывать сообщения, а не перезатирать их",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 29,
      "title": "Задание 29",
      "description": "Создайте функцию makeTwentyNine, которая использует setInterval для отображения в <p> сообщения \"Прошло 2 секунды\" каждые 2 секунды.",
      "code": "function makeTwentyNine() {\n  let result = ''\n  //Ваш код\n\n  //Очищаем setInterval для экономии ресурсов\n  setTimeout(()=>{\n    clearInterval(/*тут надо подставить id, который возвращает setInterval*/)\n  }, 7000)\n}\n\nmakeTwentyNine()",
      "correctAnswer": "function makeTwentyNine() {\n  let result = ''\n  \n  const id = setInterval(() => {\n    if(result === '') {\n      result += 'Прошло 2 секунды'\n    } else {\n      result += ' Прошло 2 секунды'\n    }\n    document.getElementById('practicum').textContent = result\n  }, 2000)\n    \n  setTimeout(() => clearInterval(id), 7000)\n}\n\nmakeTwentyNine()",
      "response": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "comment": "Подсказка: в <p> необходимо дописывать сообщения, а не перезатирать их",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    },
    {
      "id": 30,
      "title": "Задание 30",
      "description": "Создайте функцию makeThirty, которая использует setInterval для отображения в <p> сообщения \"Прошло 5 секунд\" каждые 5 секунд.",
      "code": "function makeThirty() {\n  let result = ''\n  //Ваш код\n\n  //Очищаем setInterval для экономии ресурсов\n  setTimeout(()=>{\n    clearInterval(/*тут надо подставить id, который возвращает setInterval*/)\n  }, 16000)\n}\n\nmakeThirty()",
      "correctAnswer": "function makeThirty() {\n  let result = ''\n  \n  const id = setInterval(() => {\n    if(result === '') {\n      result += 'Прошло 5 секунд'\n    } else {\n      result += ' Прошло 5 секунд'\n    }\n    document.getElementById('practicum').textContent = result\n  }, 5000)\n    \n  setTimeout(() => clearInterval(id), 16000)\n}\n\nmakeThirty()",
      "response": "Помни, что выполнение асинхронного кода занимает какое-то время.",
      "comment": "Подсказка: в <p> необходимо дописывать сообщения, а не перезатирать их",
      "html": "<section class='html'>\n  <p id=\"practicum\"></p>\n</section>",
      "htmlJSX": "<section className='html'>\n  <p id=\"practicum\"></p>\n</section>"
    }
  ]
}